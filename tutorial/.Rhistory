library(DESeq2)
if (!requireNamespace('BiocManager', quietly = TRUE))
if (!requireNamespace('BiocManager', quietly = TRUE))
if (!requireNamespace('BiocManager', quietly = TRUE))
library(DESeq2)
library(DESeq2)
if (!requireNamespace('BiocManager', quietly = TRUE))
install.packages('BiocManager')
library(DESeq2)
BiocManager::install("DESeq2")
library(DESeq2)
library(DESeq2)
library(DESeq2)
head(counts)
library(DESeq2)
head(counts)
library(DESeq2)
library(DESeq2)
head(counts)
library(DESeq2)
library(DESeq2)
counts = read.delim("https://www.ebi.ac.uk/gxa/experiments-content/E-GEOD-113048/resources/DifferentialSecondaryDataFiles.RnaSeq/raw-counts")
head(counts)
metadata = read.delim('://www.ebi.ac.uk/gxa/experiments-content/E-GEOD-113048/resources/ExperimentDesignFile.RnaSeq/experiment-design')
metadata = read.delim('https://www.ebi.ac.uk/gxa/experiments-content/E-GEOD-113048/resources/ExperimentDesignFile.RnaSeq/experiment-design')
head(counts)
head(counts)
View(metadata)
View(metadata)
head(counts)
rownames(counts) = counts$Gene.ID
head(counts)
genes = counts[, c("Gene.ID", "Gene.Name")]
counts = counts[, -c(1,2)]
head(counts)
head(metadata)
metadata = metadata[, c('Sample.Characteristic.genotype.'), drop=FALSE]
View(metadata)
metadata$genotype[metadata$genotype == 'wild type genotype'] = 'wildtype'
metadata$genotype[metadata$genotype == 'wild type genotype'] = 'wildtype'
colnames(metadata) = c('genotype')
metadata
metadata$genotype[metadata$genotype == 'wild type genotype'] = 'wildtype'
View(metadata)
library(DESeq2)
library(pheatmap)
library(dplyr)
library(RColorBrewer)
library(ggplot2)
library(ggrepel)
setwd('/Users/admin/Desktop/RNA-seq/tutorial')
count_data <= read.csv('count_matrix.csv',header=TRUE,row.names=1)
count_data <= read.csv('count_matrix.csv',header=TRUE,row.names=1)
count_data <= read.csv('count_matrix.csv',header=TRUE,row.names=1)
count_data <- read.csv('count_matrix.csv',header=TRUE,row.names=1)
View(count_data)
colnames(count_data)
head(count_data)
#Load the sample information
sample_info <- read.csv('design.csv', header=TRUE, row.names = 1)
colnames(sample_info)
#Load the sample information
sample_info <- read.csv('design.csv', header=TRUE, row.names = 1)
colnames(sample_info)
head(sample_info)
head(sample_info)
#Load the sample information
sample_info <- read.csv('design.csv', header=TRUE, row.names=1)
#Load the sample information
sample_info <- read.csv('design.csv', header=TRUE,row.names=1)
colnames(sample_info)
#Load the sample information
sample_info <- read.csv('design.csv', header=TRUE,row.names=1)
colnames(sample_info)
head(sample_info)
#Set factor levels
sample_info$Treatment <- factor(sample_info$Treatment)
sample_info$Sequencing <- factor(sample_info$Sequencing)
#Create a DESeq object and import the count data and sample information
dds <- DESeqDataSetFromMatrix(countData = count_data, colData = sample_info, design = ~Sequencing + Treatment)
# Set the reference for the Treatment factor
dds$Treatment <- factor(dds$Treatment, levels = c("untreated,","treated"))
#Filter the genes
keep <- rowSums(count(dds)) >= 5
#Set the reference for the Treatment factor
dds$Treatment <- factor(dds$Treatment, levels = c("untreated,","treated"))
#Filter the genes
keep <- rowSums(count(dds)) >= 5
#Filter the genes
keep <- rowSums(counts(dds)>10)
#Set the reference for the Treatment factor
dds$Treatment <- factor(dds$Treatment, levels = c("untreated,","treated"))
dds <- dds[keep,]
#Perform the statistical test(s) to identify differentially expressed genes
dds <- DESeq(dds)
deseq_result <- results(dds)
deseq_result
#Filter the genes
keep <- rowSums(counts(dds)>10)
dds <- dds[keep,]
#Perform the statistical test(s) to identify differentially expressed genes
dds <- DESeq(dds)
deseq_result <- results(dds)
deseq_result
#Filter the genes
keep <- rowSums(counts(dds)>10)
dds <- dds[keep,]
#Perform the statistical test(s) to identify differentially expressed genes
dds <- DESeq(dds)
deseq_result <- results(dds)
View(dds)
library(DESeq2)
#Set the working directory
setwd('/Users/admin/Desktop/RNA-seq/tutorial')
#Download raw counts
counts = read.delim("https://www.ebi.ac.uk/gxa/experiments-content/E-MTAB-5244/resources/DifferentialSecondaryDataFiles.RnaSeq/raw-counts")
head(counts)
head(metadata)
head(metadata)
#Download metadata
metadata = read.delim("https://www.ebi.ac.uk/gxa/experiments-content/E-MTAB-5244/resources/ExperimentDesignFile.RnaSeq/experiment-design")
head(metadata)
#DESeq expects the counts to have gene IDS as row names
head(counts)
rownames(counts) = counts$Gene.ID
head(counts)
#Remove unused columns (gene ID and gene name)
genes = counts[, c"Gene.ID", "Gene.Name"]
#Remove unused columns (gene ID and gene name)
genes = counts[, c("Gene.ID", "Gene.Name")]
counts = counts[, -c(1,2)]
head(counts)
#DESeq epects the metdata matrix to have sample ID's in the rownames
head(metadata)
rownames(metadata) = metadata$Run
head(metadata)
View(metadata)
#Only keep columns of interest
metadata = metadata[, c("Sample.Characteristic.genotype."), drop=FALSE]
metadata
View(metadata)
View(metadata)
#Rename Sample.Characteristic.genotype to Genotype
colnames(metadata) = c('genotype')
metadata
#Remove spaces in names to avoid DESeq Errors
metadata$genotype[metadata$genotype == 'wild type genotype'] = 'wildtype'
metadata$genotype[metadata$genotype == 'Snai1 knockout'] = 'knockout'
metadata
#Turn Genotype into a factor
metadata$genotype = factor(metadata$genotype, levels=c('wildtype','knockout'))
metadata$genotype
#Spot Checking Expression for knockout gene Snai1
gene_id = genes$Gene.ID[ genes$Gene.Name == 'SNAI1']
gene_counts = counts[gene_id, ]
gene_counts
gene_data = cbind(metadata, counts=as.numeric(gene_counts))
gene_data
library(ggplot2)
ggplot(gene_data, aes(x = genotype, y=counts, fill=genotype)) + geom_boxplot()
dds <- DESeqDataSetFromMatrix(countData=counts, colData = metadata, design= ~genotype)
#Ignore gene with low counts
dds <- dds[rowSums(counts(dds)) > 10, ]
#Run DESeq
dds <- DESeq(dds)
#Compare expression
res= results(dds, contrast=c('genotype', 'knockout', 'wildtype'), alpha=1e-5)
res
#Compare expression
res= results(dds, contrast=c('genotype', 'knockout', 'wildtype'), alpha=1e-5)
res
res
dds <- DESeqDataSetFromMatrix(countData=counts, colData = metadata, design= ~genotype)
#Ignore gene with low counts
dds <- dds[rowSums(counts(dds)) > 10, ]
#Run DESeq
dds <- DESeq(dds)
#Compare expression
res= results(dds, contrast=c('genotype', 'knockout', 'wildtype'), alpha=1e-5)
#Compare expression
res = results(dds, contrast=c('genotype', 'knockout', 'wildtype'), alpha=1e-5)
res
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData=counts, colData = metadata, design= ~genotype)
#Ignore gene with low counts
dds <- dds[rowSums(counts(dds)) > 10, ]
#Run DESeq
dds <- DESeq(dds)
#Compare expression
res = results(dds, contrast=c('genotype', 'knockout', 'wildtype'), alpha=1e-5)
library(DESeq2)
#Run DESeq
dds <- DESeq(dds)
clear
#Run DESeq
dds <- DESeq(dds)
#Compare expression
res=results(dds, contrast=c('genotype', 'knockout', 'wildtype'), alpha=1e-5)
res
#Merge gene name into data frame so can compoare to GXA UI using gene names
res_df = as.data.frame(res)
head(res_df)
head(genes)
res_df = merge(res_df, genes, by='row.names')
head(res_df)
dds <- dds[rowSums(counts(dds)) > 10, ]
genes_to_check = c('THY1', "SFMBT2", "PASD1")
res_df[res_df$Gene.Name %in% genes_to_check. ]
res_df[res_df$Gene.Name %in% genes_to_check, ]
#Visualization
plotMA(res)
#Volcano Plot
BiocManager::install('EnhancedVolcano')
library(EnhancedVolcano)
EnhancedVolcano(res, lab = rownames(res), x='log2FoldChange', y='pvalue')
#Circos Plot
BiocManager::install('biomaRt')
library(biomaRt)
#Find dataset in Ensembl
ensembl <- useEnsembl(biomart = 'genes')
dataset = listDatasets(ensembl)
head(datasets)
#Find dataset in Ensembl
ensembl <- useEnsembl(biomart = 'genes')
dataset = listDatasets(ensembl)
head(datasets)
View(dataset)
dataset_nb = grep('human', datasets$description, ignore.case=TRUE)
dataset_nb
dataset_nb = grep('human', datasets$description, ignore.case=TRUE)
head(datasets)
dataset = listDatasets(ensembl)
View(dataset)
dataset_nb = grep('human', datasets$description, ignore.case=TRUE)
#Find dataset in Ensembl
ensembl <- useEnsembl(biomart='genes')
View(dataset)
head(datasets)
head(dataset)
dataset_nb = grep('human', datasets$description, ignore.case=TRUE)
dataset_nb = grep('human', dataset$description, ignore.case=TRUE)
dataset_nb
ensembl <- useDataset(dataset=dataset, mart=ensembl)
dataset_nb = grep('human', dataset$description, ignore.case=TRUE)
dataset_nb
ensembl <- useDataset(dataset=dataset, mart=ensembl)
ensembl <- useDataset(dataset=dataset)
ensembl <- useDataset(dataset=dataset, mart=ensembl)
ensembl <- useDataset(dataset = dataset, mart=ensembl)
ensembl <- useDataset(dataset = dataset_nb, mart=ensembl)
ensembl <- useDataset(dataset = dataset, mart=ensembl)
#Get Coordinates of all genes
attributes <- c("ensembl_gene_id", "chromosome_name", "start_position", "end_position")
values <- list(ensembl_gene_id=c())
head(all.genes)
all.genes <- getBM(attributes = attributes, values = values, mart = ensembl)
#Get Coordinates of all genes
attributes <- c("ensembl_gene_id", "chromosome_name", "start_position", "end_position")
values <- list(ensembl_gene_id=c())
all.genes <- getBM(attributes = attributes, values = values, mart = ensembl)
all.genes <- getBM(attributes= attributes, values = values, mart = ensembl)
#Find dataset in Ensembl
ensembl <- useEnsembl(biomart='genes')
dataset = listDatasets(ensembl)
head(dataset)
dataset_nb = grep('human', dataset$description, ignore.case=TRUE)
dataset_nb
ensembl <- useDataset(dataset = dataset, mart=ensembl)
all.genes <- getBM(attributes= attributes, values = values, mart = ensembl)
#Get Coordinates of all genes
attributes <- c("ensembl_gene_id", "chromosome_name", "start_position", "end_position")
values <- list(ensembl_gene_id=c())
all.genes <- getBM(attributes= attributes, values = values, mart = ensembl)
head(all.genes)
ensembl <- useDataset(dataset = dataset, mart=ensembl)
ensembl <- useDataset(dataset = dataset, mart=ensembl)
dataset = listDatasets(ensembl)
View(ensembl)
head(dataset)
dataset_nb = grep('human', dataset$description, ignore.case=TRUE)
dataset_nb
ensembl <- useDataset(dataset = dataset, mart=ensembl)
ensembl <- useDataset(dataset = dataset, mart=ensembl)
View(ensembl)
all.genes <- getBM(attributes=attributes, values=values, mart=ensembl)
write.csv(merged_data_subset, "~/Documents/rna-seq/deseq_subset.csv", row.names = FALSE)
# MA plot
plotMA(res)
# Volcano plot
BiocManager::install('EnhancedVolcano')
# Volcano plot
BiocManager::install('EnhancedVolcano')
EnhancedVolcano(res, lab=rownames(res), x='log2FoldChange', y='pvalue')
# Circos plot
BiocManager::install("biomaRt")
library(biomaRt)
# Find dataset name in Ensembl
ensembl <- useEnsembl(biomart="genes")
datasets = listDatasets(ensembl)
head(datasets)
dataset_nb = grep("human", datasets$description, ignore.case=TRUE)
dataset_nb
dataset = datasets$dataset[dataset_nb]
dataset
ensembl <- useDataset(dataset=dataset, mart=ensembl)
# Get coordinates of all genes
attributes <- c("ensembl_gene_id", "chromosome_name", "start_position", "end_position")
values <- list(ensembl_gene_id=c())
all.genes <- getBM(attributes=attributes, values=values, mart=ensembl)
head(all.genes)
# Rename column so it matches res_df
head(res_df)
colnames(all.genes)[1] = "Gene.ID"
head(all.genes)
# Merge the DESeq output with the Ensembl gene coordinates
merged_data <- merge(all.genes, res_df, by="Gene.ID")
head(merged_data)
# Add chr prefix to chromosome names
merged_data$chromosome_name <- paste("chr", merged_data$chromosome_name, sep = "")
head(merged_data)
write.csv(merged_data, "~/Documents/rna-seq/deseq.csv", row.names = FALSE)
write.csv(merged_data, "~/tutorial/deseq.csv", row.names = FALSE)
write.csv(merged_data, "/Users/admin/Desktop/RNA-seq/tutorial/deseq.csv", row.names = FALSE)
# Same for subset
merged_data_subset = merged_data[merged_data$Gene.Name %in% genes_to_check, ]
head(merged_data_subset)
write.csv(merged_data_subset, "/Users/admin/Desktop/RNA-seq/tutorial/deseq_subset.csv", row.names = FALSE)
